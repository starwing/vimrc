" compiler infomation file
" Maintainer: StarWing
" Last Change: 2010-01-28 20:56:01
" need ctk {{{1

if !exists('g:loaded_ctk')
    finish
endif
let s:cpo_save = &cpo
set cpo&vim

" Common default info {{{1

au FileType c,cpp,go,objc,rust,nim,zig SetDefaultInfo!
	\ cmd='!$cc $flags $input $libs -o $executable'
	\ run='!$executable $args' input='%:.' output='%:t:r'
        \ executable='$output'
	\ asm_run=":pedit $output" args=''
	\ asm_output='$output.s'
	\ debug_run='!gdb -q $executable'

au FileType clojure,javascript,haskell,lua,metalua,fennel,moon,m4,perl,python,ruby,scheme,tcl,lisp SetDefaultInfo!
        \ cmd='#RUN_DIRECT' runmap='<f5>'
        \ run='!$cc $flags $src $args' src='%:.'
        \ flags='' args=''

if has('unix')
    au FileType c,cpp SetDefaultInfo asm_output='$output.s' executable="./$output"
else
    au FileType c,cpp SetDefaultInfo asm_output='$output.asm'
endif

if has('win32')
    au FileType rust,go SetDefaultInfo executable='$output.exe'
endif


" filetype C {{{1

au FileType c SetExtensionName c
au FileType c SetCompilerInfo! gcc
    	\ title='GNU C Compiler'
    	\ cc='gcc' flags='-Wall' libs='' cmdmap='<m-c>' runmap='<m-1> <f5>'
    	\ asm_title='GCC to ASM' asm_flags='-S $flags'
    	\ debug_title='GCC with debug' debug_flags='-ggdb $flags'

au FileType c SetCompilerInfo! vc6  
    	\ title='Microsoft Visual C'
    	\ cc='cl' flags='-W4' libs='' runmap='<m-2> <f6>'
    	\ asm_title='Microsoft VC to ASM' asm_flags='/FAs $flags'

" filetype C++ {{{1

au FileType cpp SetExtensionName cpp
au FileType cpp SetCompilerInfo! g++
    	\ title='GNU Compiler Collection - C++'
    	\ cc='g++' flags='-Wall' libs='' cmdmap='<m-c>' runmap='<m-1> <f5>'
    	\ asm_title='G++ to ASM' asm_flags='-S $flags'
    	\ debug_title='G++ with debug' debug_flags='-ggdb $flags'

au FileType cpp SetCompilerInfo! vc++
    	\ title='Microsoft Visual C++'
    	\ cc='cl' flags='-W4' libs='' runmap='<m-2> <f6>'
    	\ asm_title='Microsoft VC++ to ASM'
    	\ asm_flags='/FAs $flags'

" filetype Objective-C {{{1

au FileType objc SetExtensionName m
au FileType objc SetCompilerInfo! clang
    	\ title='Clang Compiler - Objective-C'
    	\ cc='clang' flags='-framework Cocoa' libs=''

" filetype rust {{{1

au FileType rust SetExtensionName rs
au FileType rust SetCompilerInfo! rustc
    	\ title='rustc' cc='rustc' flags='-Ctarget-feature=+crt-static -O' libs=''

" filetype clojure "{{{1
 
au FileType clojure SetExtensionName clj
au FileType clojure SetCompilerInfo! clojure
	    \ title='clojure' cc='java clojure.main'
 
" filetype go {{{1

au FileType go SetExtensionName go
au FileType go SetCompilerInfo! go
	\ cmd='!go build $flags -o $executable $input' flags=''
	\ run='!$executable $args' input='%:.' args=''

" filetype graphviz {{{1

au FileType dot SetExtensionName dot
au FileType dot SetCompilerInfo! dot
	    \ title='graphviz(dot)' cc='dot' flags='-Tpng'
	    \ cmd='$cc $flags $input -o $output.png'
	    \ run='$output.png'

" filetype haskell {{{1

au FileType haskell SetExtensionName hs
au FileType haskell SetCompilerInfo! ghci
	    \ title='ghci' cc='ghci' cmdmap='<f5>'

" filetype java {{{1
au FileType java SetExtensionName java
au FileType java SetCompilerInfo! java
            \ cmd='!javac $flags $input' flags='-d . -g' input='%:.'
	\ run='!java $class $args' class='Solution' args=''

" filetype javascript {{{1
au FileType javascript SetExtensionName js
au FileType javascript SetCompilerInfo! js
	    \ title='node' cc='node'

" filetype lua {{{1

au FileType lua SetExtensionName lua
au FileType lua SetCompilerInfo! lua
	    \ title='lua' cc='lua' src='-- %:.' cmdmap='<f5>'

au FileType lua SetCompilerInfo! metalua
	    \ title='metalua' cc='metalua -f $input'

" filetype fennel {{{1

au FileType fennel SetExtensionName fnl
au FileType fennel SetCompilerInfo! fnl
	    \ title='fennel' cc='fennel' src='%:.' cmdmap='<f5>'

" filetype metalua {{{1

au FileType meta.lua SetExtensionName mlua
au FileType meta.lua SetCompilerInfo! mlua
	    \ title='metalua' cc='metalua' src='-f %:.' cmdmap='<f5>'

" filetype moonscript {{{1

au FileType moon SetExtensionName moon
au FileType moon SetCompilerInfo! moon
	    \ title='moon' cc='moon' src='-- %:.' cmdmap='<f5>'

" filetype m4 {{{1

au FileType m4 SetExtensionName m4
au FileType m4 SetCompilerInfo! m4
	    \ title='m4' cc='m4' src='-- %:.'

" filetype nim {{{1

au FileType nim SetExtensionName nim
au FileType nim SetCompilerInfo! nim
	    \ title='nim' cc='nim c' flags=''
            \ cmd='!$cc $flags -o:$executable $input'

" filletype ocaml {{{1

au FileType ml SetExtensionName ml
au FileType ml SetCompilerInfo! ml
	    \ title='ocaml' cc='ocamlc' src='-- %:.'

" filetype erlang {{{1

au FileType erlang SetExtensionName erl

au FileType erlang SetCompilerInfo! escript
            \ cmd='#RUN_DIRECT' runmap='<f5>'
            \ run='!$cc $flags $src $args' src='%:.'
            \ flags='' args=''
            \ title='escript' cc='escript' src='-- %:.' cmdmap='<f5>'

au FileType erlang SetCompilerInfo! erlc
            \ title='erlang erlc' input='%:.'
            \ cc='erlc' flags='-Werror' outdir='.'
            \ cmd='!$cc $flags -o $outdir $input'
            \ run='!$output $args' args=''

" filetype elixir {{{1

au FileType elixir SetExtensionName ex

au FileType elixir SetCompilerInfo! exlixir
            \ cmd='#RUN_DIRECT' runmap='<f5>'
            \ run='!$cc $flags $src $args' src='%:.'
            \ flags='' args=''
            \ title='elixir' cc='elixir' src='%:.' cmdmap='<f5>'

au FileType elixir SetCompilerInfo! elixirc
            \ title='elixir compiler' input='%:.'
            \ cc='elixirc' flags='-Werror' outdir='.'
            \ cmd='!$cc $flags -o $outdir $input'
            \ run='!$output $args' args=''

" filetype perl {{{1

au FileType perl SetExtensionName pl
au FileType perl SetCompilerInfo! perl
	    \ title='perl' cc='perl' src='-- %:.'

" filetype python {{{1

au FileType python SetExtensionName py
if executable('python3')
    au FileType python SetCompilerInfo! python
                \ title='Python' cc='python3'
else
    au FileType python SetCompilerInfo! python
                \ title='Python' cc='python'
endif

" filetype rst {{{1

au FileType rest SetExtensionName rst
au FileType rest SetCompilerInfo rst2html
	    \ cc='rst2html' input='%:.' output='%:r.html'
	    \ cmd='!$cc $flags $input $output' flags='--stylesheet=default.css --link-stylesheet'
	    \ run='!"$output"'


" filetype markdown {{{1

au FileType markdown SetExtensionName md
au FileType markdown SetCompilerInfo mmd2html
	    \ cc='lunamark' input='%:.' output='%:r.html'
	    \ cmd='!$cc $flags -o $output $input' flags=''
	    \ run='!"$output"'


" filetype ruby {{{1

au FileType ruby SetExtensionName rb
au FileType ruby SetCompilerInfo! ruby
            \ title='Ruby 1.9.1 - Matz' cc='ruby' src='-- %:.'

" filetype scheme {{{1

au FileType scheme SetExtensionName scm
au FileType scheme SetCompilerInfo! racket
            \ title='racket' cc='racket'
au FileType scheme SetCompilerInfo! chicken
            \ title='chicken' cc='csi' flags='-q'

" filetype tcl {{{1

au FileType tcl SetExtensionName tcl
au FileType tcl SetCompilerInfo! tclsh
            \ title='tclsh' cc='tclsh'

" filetype lisp {{{1

au FileType lisp SetExtensionName lisp
au FileType lisp SetCompilerInfo! sbcl
            \ title='sbcl' cc='sbcl' flags='--script'

" filetype zig {{{1

au FileType zig SetExtensionName zig
au FileType zig SetCompilerInfo! zig
            \ cmd='!$cc $flags --name $executable $libs $input'
            \ title='zig' cc='zig build-exe' flags='' libs=''

" terminational works {{{1
let &cpo = s:cpo_save
unlet s:cpo_save " }}}1
" vim: ff=unix ft=vim fdm=marker sw=4 ts=8 sta
